/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LlamaNotificationService_H
#define LlamaNotificationService_H

#include <thrift/TDispatchProcessor.h>
#include "Llama_types.h"

namespace llama {

class LlamaNotificationServiceIf {
 public:
  virtual ~LlamaNotificationServiceIf() {}
  virtual void AMNotification(TLlamaAMNotificationResponse& _return, const TLlamaAMNotificationRequest& request) = 0;
  virtual void NMNotification(TLlamaNMNotificationResponse& _return, const TLlamaNMNotificationRequest& request) = 0;
};

class LlamaNotificationServiceIfFactory {
 public:
  typedef LlamaNotificationServiceIf Handler;

  virtual ~LlamaNotificationServiceIfFactory() {}

  virtual LlamaNotificationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LlamaNotificationServiceIf* /* handler */) = 0;
};

class LlamaNotificationServiceIfSingletonFactory : virtual public LlamaNotificationServiceIfFactory {
 public:
  LlamaNotificationServiceIfSingletonFactory(const boost::shared_ptr<LlamaNotificationServiceIf>& iface) : iface_(iface) {}
  virtual ~LlamaNotificationServiceIfSingletonFactory() {}

  virtual LlamaNotificationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LlamaNotificationServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<LlamaNotificationServiceIf> iface_;
};

class LlamaNotificationServiceNull : virtual public LlamaNotificationServiceIf {
 public:
  virtual ~LlamaNotificationServiceNull() {}
  void AMNotification(TLlamaAMNotificationResponse& /* _return */, const TLlamaAMNotificationRequest& /* request */) {
    return;
  }
  void NMNotification(TLlamaNMNotificationResponse& /* _return */, const TLlamaNMNotificationRequest& /* request */) {
    return;
  }
};

typedef struct _LlamaNotificationService_AMNotification_args__isset {
  _LlamaNotificationService_AMNotification_args__isset() : request(false) {}
  bool request;
} _LlamaNotificationService_AMNotification_args__isset;

class LlamaNotificationService_AMNotification_args {
 public:

  LlamaNotificationService_AMNotification_args() {
  }

  virtual ~LlamaNotificationService_AMNotification_args() throw() {}

  TLlamaAMNotificationRequest request;

  _LlamaNotificationService_AMNotification_args__isset __isset;

  void __set_request(const TLlamaAMNotificationRequest& val) {
    request = val;
    __isset.request = true;
  }

  bool operator == (const LlamaNotificationService_AMNotification_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const LlamaNotificationService_AMNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LlamaNotificationService_AMNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LlamaNotificationService_AMNotification_pargs {
 public:


  virtual ~LlamaNotificationService_AMNotification_pargs() throw() {}

  const TLlamaAMNotificationRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LlamaNotificationService_AMNotification_result__isset {
  _LlamaNotificationService_AMNotification_result__isset() : success(false) {}
  bool success;
} _LlamaNotificationService_AMNotification_result__isset;

class LlamaNotificationService_AMNotification_result {
 public:

  LlamaNotificationService_AMNotification_result() {
  }

  virtual ~LlamaNotificationService_AMNotification_result() throw() {}

  TLlamaAMNotificationResponse success;

  _LlamaNotificationService_AMNotification_result__isset __isset;

  void __set_success(const TLlamaAMNotificationResponse& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const LlamaNotificationService_AMNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LlamaNotificationService_AMNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LlamaNotificationService_AMNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LlamaNotificationService_AMNotification_presult__isset {
  _LlamaNotificationService_AMNotification_presult__isset() : success(false) {}
  bool success;
} _LlamaNotificationService_AMNotification_presult__isset;

class LlamaNotificationService_AMNotification_presult {
 public:


  virtual ~LlamaNotificationService_AMNotification_presult() throw() {}

  TLlamaAMNotificationResponse* success;

  _LlamaNotificationService_AMNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LlamaNotificationService_NMNotification_args__isset {
  _LlamaNotificationService_NMNotification_args__isset() : request(false) {}
  bool request;
} _LlamaNotificationService_NMNotification_args__isset;

class LlamaNotificationService_NMNotification_args {
 public:

  LlamaNotificationService_NMNotification_args() {
  }

  virtual ~LlamaNotificationService_NMNotification_args() throw() {}

  TLlamaNMNotificationRequest request;

  _LlamaNotificationService_NMNotification_args__isset __isset;

  void __set_request(const TLlamaNMNotificationRequest& val) {
    request = val;
    __isset.request = true;
  }

  bool operator == (const LlamaNotificationService_NMNotification_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const LlamaNotificationService_NMNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LlamaNotificationService_NMNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LlamaNotificationService_NMNotification_pargs {
 public:


  virtual ~LlamaNotificationService_NMNotification_pargs() throw() {}

  const TLlamaNMNotificationRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LlamaNotificationService_NMNotification_result__isset {
  _LlamaNotificationService_NMNotification_result__isset() : success(false) {}
  bool success;
} _LlamaNotificationService_NMNotification_result__isset;

class LlamaNotificationService_NMNotification_result {
 public:

  LlamaNotificationService_NMNotification_result() {
  }

  virtual ~LlamaNotificationService_NMNotification_result() throw() {}

  TLlamaNMNotificationResponse success;

  _LlamaNotificationService_NMNotification_result__isset __isset;

  void __set_success(const TLlamaNMNotificationResponse& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const LlamaNotificationService_NMNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LlamaNotificationService_NMNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LlamaNotificationService_NMNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LlamaNotificationService_NMNotification_presult__isset {
  _LlamaNotificationService_NMNotification_presult__isset() : success(false) {}
  bool success;
} _LlamaNotificationService_NMNotification_presult__isset;

class LlamaNotificationService_NMNotification_presult {
 public:


  virtual ~LlamaNotificationService_NMNotification_presult() throw() {}

  TLlamaNMNotificationResponse* success;

  _LlamaNotificationService_NMNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LlamaNotificationServiceClient : virtual public LlamaNotificationServiceIf {
 public:
  LlamaNotificationServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  LlamaNotificationServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AMNotification(TLlamaAMNotificationResponse& _return, const TLlamaAMNotificationRequest& request);
  void send_AMNotification(const TLlamaAMNotificationRequest& request);
  void recv_AMNotification(TLlamaAMNotificationResponse& _return);
  void NMNotification(TLlamaNMNotificationResponse& _return, const TLlamaNMNotificationRequest& request);
  void send_NMNotification(const TLlamaNMNotificationRequest& request);
  void recv_NMNotification(TLlamaNMNotificationResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LlamaNotificationServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LlamaNotificationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LlamaNotificationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AMNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NMNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LlamaNotificationServiceProcessor(boost::shared_ptr<LlamaNotificationServiceIf> iface) :
    iface_(iface) {
    processMap_["AMNotification"] = &LlamaNotificationServiceProcessor::process_AMNotification;
    processMap_["NMNotification"] = &LlamaNotificationServiceProcessor::process_NMNotification;
  }

  virtual ~LlamaNotificationServiceProcessor() {}
};

class LlamaNotificationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LlamaNotificationServiceProcessorFactory(const ::boost::shared_ptr< LlamaNotificationServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LlamaNotificationServiceIfFactory > handlerFactory_;
};

class LlamaNotificationServiceMultiface : virtual public LlamaNotificationServiceIf {
 public:
  LlamaNotificationServiceMultiface(std::vector<boost::shared_ptr<LlamaNotificationServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LlamaNotificationServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LlamaNotificationServiceIf> > ifaces_;
  LlamaNotificationServiceMultiface() {}
  void add(boost::shared_ptr<LlamaNotificationServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AMNotification(TLlamaAMNotificationResponse& _return, const TLlamaAMNotificationRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AMNotification(_return, request);
    }
    ifaces_[i]->AMNotification(_return, request);
    return;
  }

  void NMNotification(TLlamaNMNotificationResponse& _return, const TLlamaNMNotificationRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NMNotification(_return, request);
    }
    ifaces_[i]->NMNotification(_return, request);
    return;
  }

};

} // namespace

#endif
