/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Llama_TYPES_H
#define Llama_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace llama {

struct TLlamaServiceVersion {
  enum type {
    V1 = 0
  };
};

extern const std::map<int, const char*> _TLlamaServiceVersion_VALUES_TO_NAMES;

struct TStatusCode {
  enum type {
    OK = 0,
    REQUEST_ERROR = 1,
    INTERNAL_ERROR = 2
  };
};

extern const std::map<int, const char*> _TStatusCode_VALUES_TO_NAMES;

struct TLocationEnforcement {
  enum type {
    MUST = 0,
    PREFERRED = 1,
    DONT_CARE = 2
  };
};

extern const std::map<int, const char*> _TLocationEnforcement_VALUES_TO_NAMES;


class TUniqueId {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  TUniqueId() : hi(0), lo(0) {
  }

  virtual ~TUniqueId() throw() {}

  int64_t hi;
  int64_t lo;

  void __set_hi(const int64_t val) {
    hi = val;
  }

  void __set_lo(const int64_t val) {
    lo = val;
  }

  bool operator == (const TUniqueId & rhs) const
  {
    if (!(hi == rhs.hi))
      return false;
    if (!(lo == rhs.lo))
      return false;
    return true;
  }
  bool operator != (const TUniqueId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUniqueId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUniqueId &a, TUniqueId &b);


class TNetworkAddress {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  TNetworkAddress() : hostname(), port(0) {
  }

  virtual ~TNetworkAddress() throw() {}

  std::string hostname;
  int32_t port;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  bool operator == (const TNetworkAddress & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const TNetworkAddress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TNetworkAddress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TNetworkAddress &a, TNetworkAddress &b);

typedef struct _TStatus__isset {
  _TStatus__isset() : error_code(false), error_msgs(false) {}
  bool error_code;
  bool error_msgs;
} _TStatus__isset;

class TStatus {
 public:

  static const char* ascii_fingerprint; // = "C0FF35D72FD3159E1E3A717776318274";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0xFF,0x35,0xD7,0x2F,0xD3,0x15,0x9E,0x1E,0x3A,0x71,0x77,0x76,0x31,0x82,0x74};

  TStatus() : status_code((TStatusCode::type)0), error_code(0) {
  }

  virtual ~TStatus() throw() {}

  TStatusCode::type status_code;
  int16_t error_code;
  std::vector<std::string>  error_msgs;

  _TStatus__isset __isset;

  void __set_status_code(const TStatusCode::type val) {
    status_code = val;
  }

  void __set_error_code(const int16_t val) {
    error_code = val;
    __isset.error_code = true;
  }

  void __set_error_msgs(const std::vector<std::string> & val) {
    error_msgs = val;
    __isset.error_msgs = true;
  }

  bool operator == (const TStatus & rhs) const
  {
    if (!(status_code == rhs.status_code))
      return false;
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_msgs == rhs.error_msgs))
      return false;
    return true;
  }
  bool operator != (const TStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TStatus &a, TStatus &b);


class TResource {
 public:

  static const char* ascii_fingerprint; // = "BE3FB4C941B87755EFDF84519C67D8CC";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x3F,0xB4,0xC9,0x41,0xB8,0x77,0x55,0xEF,0xDF,0x84,0x51,0x9C,0x67,0xD8,0xCC};

  TResource() : v_cpu_cores(0), memory_mb(0), askedLocation(), enforcement((TLocationEnforcement::type)0) {
  }

  virtual ~TResource() throw() {}

  TUniqueId client_resource_id;
  int16_t v_cpu_cores;
  int32_t memory_mb;
  std::string askedLocation;
  TLocationEnforcement::type enforcement;

  void __set_client_resource_id(const TUniqueId& val) {
    client_resource_id = val;
  }

  void __set_v_cpu_cores(const int16_t val) {
    v_cpu_cores = val;
  }

  void __set_memory_mb(const int32_t val) {
    memory_mb = val;
  }

  void __set_askedLocation(const std::string& val) {
    askedLocation = val;
  }

  void __set_enforcement(const TLocationEnforcement::type val) {
    enforcement = val;
  }

  bool operator == (const TResource & rhs) const
  {
    if (!(client_resource_id == rhs.client_resource_id))
      return false;
    if (!(v_cpu_cores == rhs.v_cpu_cores))
      return false;
    if (!(memory_mb == rhs.memory_mb))
      return false;
    if (!(askedLocation == rhs.askedLocation))
      return false;
    if (!(enforcement == rhs.enforcement))
      return false;
    return true;
  }
  bool operator != (const TResource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResource &a, TResource &b);


class TAllocatedResource {
 public:

  static const char* ascii_fingerprint; // = "36012343F0B1E3DCA3EBB46C6B11F57D";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x01,0x23,0x43,0xF0,0xB1,0xE3,0xDC,0xA3,0xEB,0xB4,0x6C,0x6B,0x11,0xF5,0x7D};

  TAllocatedResource() : rm_resource_id(), v_cpu_cores(0), memory_mb(0), location() {
  }

  virtual ~TAllocatedResource() throw() {}

  TUniqueId reservation_id;
  TUniqueId client_resource_id;
  std::string rm_resource_id;
  int16_t v_cpu_cores;
  int32_t memory_mb;
  std::string location;

  void __set_reservation_id(const TUniqueId& val) {
    reservation_id = val;
  }

  void __set_client_resource_id(const TUniqueId& val) {
    client_resource_id = val;
  }

  void __set_rm_resource_id(const std::string& val) {
    rm_resource_id = val;
  }

  void __set_v_cpu_cores(const int16_t val) {
    v_cpu_cores = val;
  }

  void __set_memory_mb(const int32_t val) {
    memory_mb = val;
  }

  void __set_location(const std::string& val) {
    location = val;
  }

  bool operator == (const TAllocatedResource & rhs) const
  {
    if (!(reservation_id == rhs.reservation_id))
      return false;
    if (!(client_resource_id == rhs.client_resource_id))
      return false;
    if (!(rm_resource_id == rhs.rm_resource_id))
      return false;
    if (!(v_cpu_cores == rhs.v_cpu_cores))
      return false;
    if (!(memory_mb == rhs.memory_mb))
      return false;
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const TAllocatedResource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAllocatedResource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TAllocatedResource &a, TAllocatedResource &b);


class TNodeCapacity {
 public:

  static const char* ascii_fingerprint; // = "44F84EAE6E65F2D7C4531F2B53D71D9D";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xF8,0x4E,0xAE,0x6E,0x65,0xF2,0xD7,0xC4,0x53,0x1F,0x2B,0x53,0xD7,0x1D,0x9D};

  TNodeCapacity() : total_v_cpu_cores(0), total_memory_mb(0), free_v_cpu_cores(0), free_memory_mb(0) {
  }

  virtual ~TNodeCapacity() throw() {}

  int16_t total_v_cpu_cores;
  int32_t total_memory_mb;
  int16_t free_v_cpu_cores;
  int32_t free_memory_mb;

  void __set_total_v_cpu_cores(const int16_t val) {
    total_v_cpu_cores = val;
  }

  void __set_total_memory_mb(const int32_t val) {
    total_memory_mb = val;
  }

  void __set_free_v_cpu_cores(const int16_t val) {
    free_v_cpu_cores = val;
  }

  void __set_free_memory_mb(const int32_t val) {
    free_memory_mb = val;
  }

  bool operator == (const TNodeCapacity & rhs) const
  {
    if (!(total_v_cpu_cores == rhs.total_v_cpu_cores))
      return false;
    if (!(total_memory_mb == rhs.total_memory_mb))
      return false;
    if (!(free_v_cpu_cores == rhs.free_v_cpu_cores))
      return false;
    if (!(free_memory_mb == rhs.free_memory_mb))
      return false;
    return true;
  }
  bool operator != (const TNodeCapacity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TNodeCapacity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TNodeCapacity &a, TNodeCapacity &b);


class TLlamaAMRegisterRequest {
 public:

  static const char* ascii_fingerprint; // = "DCF44E72A91B64CD636117316604EE19";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0xF4,0x4E,0x72,0xA9,0x1B,0x64,0xCD,0x63,0x61,0x17,0x31,0x66,0x04,0xEE,0x19};

  TLlamaAMRegisterRequest() : version((TLlamaServiceVersion::type)0) {
  }

  virtual ~TLlamaAMRegisterRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId client_id;
  TNetworkAddress notification_callback_service;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_client_id(const TUniqueId& val) {
    client_id = val;
  }

  void __set_notification_callback_service(const TNetworkAddress& val) {
    notification_callback_service = val;
  }

  bool operator == (const TLlamaAMRegisterRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    if (!(notification_callback_service == rhs.notification_callback_service))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMRegisterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMRegisterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMRegisterRequest &a, TLlamaAMRegisterRequest &b);

typedef struct _TLlamaAMRegisterResponse__isset {
  _TLlamaAMRegisterResponse__isset() : am_handle(false) {}
  bool am_handle;
} _TLlamaAMRegisterResponse__isset;

class TLlamaAMRegisterResponse {
 public:

  static const char* ascii_fingerprint; // = "B27966211E1E9D69DFBF9D9ED7D306C4";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x79,0x66,0x21,0x1E,0x1E,0x9D,0x69,0xDF,0xBF,0x9D,0x9E,0xD7,0xD3,0x06,0xC4};

  TLlamaAMRegisterResponse() {
  }

  virtual ~TLlamaAMRegisterResponse() throw() {}

  TStatus status;
  TUniqueId am_handle;

  _TLlamaAMRegisterResponse__isset __isset;

  void __set_status(const TStatus& val) {
    status = val;
  }

  void __set_am_handle(const TUniqueId& val) {
    am_handle = val;
    __isset.am_handle = true;
  }

  bool operator == (const TLlamaAMRegisterResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.am_handle != rhs.__isset.am_handle)
      return false;
    else if (__isset.am_handle && !(am_handle == rhs.am_handle))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMRegisterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMRegisterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMRegisterResponse &a, TLlamaAMRegisterResponse &b);


class TLlamaAMUnregisterRequest {
 public:

  static const char* ascii_fingerprint; // = "C65535C1E1958EED5D673504D80CEAFE";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x55,0x35,0xC1,0xE1,0x95,0x8E,0xED,0x5D,0x67,0x35,0x04,0xD8,0x0C,0xEA,0xFE};

  TLlamaAMUnregisterRequest() : version((TLlamaServiceVersion::type)0) {
  }

  virtual ~TLlamaAMUnregisterRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId am_handle;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_am_handle(const TUniqueId& val) {
    am_handle = val;
  }

  bool operator == (const TLlamaAMUnregisterRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(am_handle == rhs.am_handle))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMUnregisterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMUnregisterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMUnregisterRequest &a, TLlamaAMUnregisterRequest &b);


class TLlamaAMUnregisterResponse {
 public:

  static const char* ascii_fingerprint; // = "5A96C4E87CB5680F602C8C8BC07FBFCE";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x96,0xC4,0xE8,0x7C,0xB5,0x68,0x0F,0x60,0x2C,0x8C,0x8B,0xC0,0x7F,0xBF,0xCE};

  TLlamaAMUnregisterResponse() {
  }

  virtual ~TLlamaAMUnregisterResponse() throw() {}

  TStatus status;

  void __set_status(const TStatus& val) {
    status = val;
  }

  bool operator == (const TLlamaAMUnregisterResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMUnregisterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMUnregisterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMUnregisterResponse &a, TLlamaAMUnregisterResponse &b);

typedef struct _TLlamaAMReservationRequest__isset {
  _TLlamaAMReservationRequest__isset() : queue(false) {}
  bool queue;
} _TLlamaAMReservationRequest__isset;

class TLlamaAMReservationRequest {
 public:

  static const char* ascii_fingerprint; // = "9818F2FC56DA1D6D27BB83AF872DCE8A";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x18,0xF2,0xFC,0x56,0xDA,0x1D,0x6D,0x27,0xBB,0x83,0xAF,0x87,0x2D,0xCE,0x8A};

  TLlamaAMReservationRequest() : version((TLlamaServiceVersion::type)0), user(), queue(), gang(0) {
  }

  virtual ~TLlamaAMReservationRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId am_handle;
  std::string user;
  std::string queue;
  std::vector<TResource>  resources;
  bool gang;

  _TLlamaAMReservationRequest__isset __isset;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_am_handle(const TUniqueId& val) {
    am_handle = val;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_queue(const std::string& val) {
    queue = val;
    __isset.queue = true;
  }

  void __set_resources(const std::vector<TResource> & val) {
    resources = val;
  }

  void __set_gang(const bool val) {
    gang = val;
  }

  bool operator == (const TLlamaAMReservationRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(am_handle == rhs.am_handle))
      return false;
    if (!(user == rhs.user))
      return false;
    if (__isset.queue != rhs.__isset.queue)
      return false;
    else if (__isset.queue && !(queue == rhs.queue))
      return false;
    if (!(resources == rhs.resources))
      return false;
    if (!(gang == rhs.gang))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMReservationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMReservationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMReservationRequest &a, TLlamaAMReservationRequest &b);

typedef struct _TLlamaAMReservationResponse__isset {
  _TLlamaAMReservationResponse__isset() : reservation_id(false) {}
  bool reservation_id;
} _TLlamaAMReservationResponse__isset;

class TLlamaAMReservationResponse {
 public:

  static const char* ascii_fingerprint; // = "B27966211E1E9D69DFBF9D9ED7D306C4";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x79,0x66,0x21,0x1E,0x1E,0x9D,0x69,0xDF,0xBF,0x9D,0x9E,0xD7,0xD3,0x06,0xC4};

  TLlamaAMReservationResponse() {
  }

  virtual ~TLlamaAMReservationResponse() throw() {}

  TStatus status;
  TUniqueId reservation_id;

  _TLlamaAMReservationResponse__isset __isset;

  void __set_status(const TStatus& val) {
    status = val;
  }

  void __set_reservation_id(const TUniqueId& val) {
    reservation_id = val;
    __isset.reservation_id = true;
  }

  bool operator == (const TLlamaAMReservationResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.reservation_id != rhs.__isset.reservation_id)
      return false;
    else if (__isset.reservation_id && !(reservation_id == rhs.reservation_id))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMReservationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMReservationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMReservationResponse &a, TLlamaAMReservationResponse &b);


class TLlamaAMReservationExpansionRequest {
 public:

  static const char* ascii_fingerprint; // = "FFEAFF973023E6F939F4ADEB8E0F6BEC";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0xEA,0xFF,0x97,0x30,0x23,0xE6,0xF9,0x39,0xF4,0xAD,0xEB,0x8E,0x0F,0x6B,0xEC};

  TLlamaAMReservationExpansionRequest() : version((TLlamaServiceVersion::type)0) {
  }

  virtual ~TLlamaAMReservationExpansionRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId am_handle;
  TUniqueId expansion_of;
  TResource resource;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_am_handle(const TUniqueId& val) {
    am_handle = val;
  }

  void __set_expansion_of(const TUniqueId& val) {
    expansion_of = val;
  }

  void __set_resource(const TResource& val) {
    resource = val;
  }

  bool operator == (const TLlamaAMReservationExpansionRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(am_handle == rhs.am_handle))
      return false;
    if (!(expansion_of == rhs.expansion_of))
      return false;
    if (!(resource == rhs.resource))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMReservationExpansionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMReservationExpansionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMReservationExpansionRequest &a, TLlamaAMReservationExpansionRequest &b);

typedef struct _TLlamaAMReservationExpansionResponse__isset {
  _TLlamaAMReservationExpansionResponse__isset() : reservation_id(false) {}
  bool reservation_id;
} _TLlamaAMReservationExpansionResponse__isset;

class TLlamaAMReservationExpansionResponse {
 public:

  static const char* ascii_fingerprint; // = "B27966211E1E9D69DFBF9D9ED7D306C4";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x79,0x66,0x21,0x1E,0x1E,0x9D,0x69,0xDF,0xBF,0x9D,0x9E,0xD7,0xD3,0x06,0xC4};

  TLlamaAMReservationExpansionResponse() {
  }

  virtual ~TLlamaAMReservationExpansionResponse() throw() {}

  TStatus status;
  TUniqueId reservation_id;

  _TLlamaAMReservationExpansionResponse__isset __isset;

  void __set_status(const TStatus& val) {
    status = val;
  }

  void __set_reservation_id(const TUniqueId& val) {
    reservation_id = val;
    __isset.reservation_id = true;
  }

  bool operator == (const TLlamaAMReservationExpansionResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.reservation_id != rhs.__isset.reservation_id)
      return false;
    else if (__isset.reservation_id && !(reservation_id == rhs.reservation_id))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMReservationExpansionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMReservationExpansionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMReservationExpansionResponse &a, TLlamaAMReservationExpansionResponse &b);


class TLlamaAMReleaseRequest {
 public:

  static const char* ascii_fingerprint; // = "F2364A51C1B053713CED7E720074AA78";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x36,0x4A,0x51,0xC1,0xB0,0x53,0x71,0x3C,0xED,0x7E,0x72,0x00,0x74,0xAA,0x78};

  TLlamaAMReleaseRequest() : version((TLlamaServiceVersion::type)0) {
  }

  virtual ~TLlamaAMReleaseRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId am_handle;
  TUniqueId reservation_id;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_am_handle(const TUniqueId& val) {
    am_handle = val;
  }

  void __set_reservation_id(const TUniqueId& val) {
    reservation_id = val;
  }

  bool operator == (const TLlamaAMReleaseRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(am_handle == rhs.am_handle))
      return false;
    if (!(reservation_id == rhs.reservation_id))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMReleaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMReleaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMReleaseRequest &a, TLlamaAMReleaseRequest &b);


class TLlamaAMReleaseResponse {
 public:

  static const char* ascii_fingerprint; // = "5A96C4E87CB5680F602C8C8BC07FBFCE";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x96,0xC4,0xE8,0x7C,0xB5,0x68,0x0F,0x60,0x2C,0x8C,0x8B,0xC0,0x7F,0xBF,0xCE};

  TLlamaAMReleaseResponse() {
  }

  virtual ~TLlamaAMReleaseResponse() throw() {}

  TStatus status;

  void __set_status(const TStatus& val) {
    status = val;
  }

  bool operator == (const TLlamaAMReleaseResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMReleaseResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMReleaseResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMReleaseResponse &a, TLlamaAMReleaseResponse &b);


class TLlamaAMGetNodesRequest {
 public:

  static const char* ascii_fingerprint; // = "C65535C1E1958EED5D673504D80CEAFE";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x55,0x35,0xC1,0xE1,0x95,0x8E,0xED,0x5D,0x67,0x35,0x04,0xD8,0x0C,0xEA,0xFE};

  TLlamaAMGetNodesRequest() : version((TLlamaServiceVersion::type)0) {
  }

  virtual ~TLlamaAMGetNodesRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId am_handle;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_am_handle(const TUniqueId& val) {
    am_handle = val;
  }

  bool operator == (const TLlamaAMGetNodesRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(am_handle == rhs.am_handle))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMGetNodesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMGetNodesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMGetNodesRequest &a, TLlamaAMGetNodesRequest &b);

typedef struct _TLlamaAMGetNodesResponse__isset {
  _TLlamaAMGetNodesResponse__isset() : nodes(false) {}
  bool nodes;
} _TLlamaAMGetNodesResponse__isset;

class TLlamaAMGetNodesResponse {
 public:

  static const char* ascii_fingerprint; // = "B1237A10184854C3AEC5E8ED08A4A04C";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x23,0x7A,0x10,0x18,0x48,0x54,0xC3,0xAE,0xC5,0xE8,0xED,0x08,0xA4,0xA0,0x4C};

  TLlamaAMGetNodesResponse() {
  }

  virtual ~TLlamaAMGetNodesResponse() throw() {}

  TStatus status;
  std::vector<std::string>  nodes;

  _TLlamaAMGetNodesResponse__isset __isset;

  void __set_status(const TStatus& val) {
    status = val;
  }

  void __set_nodes(const std::vector<std::string> & val) {
    nodes = val;
    __isset.nodes = true;
  }

  bool operator == (const TLlamaAMGetNodesResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.nodes != rhs.__isset.nodes)
      return false;
    else if (__isset.nodes && !(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMGetNodesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMGetNodesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMGetNodesResponse &a, TLlamaAMGetNodesResponse &b);

typedef struct _TLlamaAMAdminReleaseRequest__isset {
  _TLlamaAMAdminReleaseRequest__isset() : do_not_cache(true), queues(false), handles(false), reservations(false) {}
  bool do_not_cache;
  bool queues;
  bool handles;
  bool reservations;
} _TLlamaAMAdminReleaseRequest__isset;

class TLlamaAMAdminReleaseRequest {
 public:

  static const char* ascii_fingerprint; // = "E988AFF1AC5C345AFD56C26FF90B36A2";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x88,0xAF,0xF1,0xAC,0x5C,0x34,0x5A,0xFD,0x56,0xC2,0x6F,0xF9,0x0B,0x36,0xA2};

  TLlamaAMAdminReleaseRequest() : version((TLlamaServiceVersion::type)0), do_not_cache(false) {
  }

  virtual ~TLlamaAMAdminReleaseRequest() throw() {}

  TLlamaServiceVersion::type version;
  bool do_not_cache;
  std::vector<std::string>  queues;
  std::vector<TUniqueId>  handles;
  std::vector<TUniqueId>  reservations;

  _TLlamaAMAdminReleaseRequest__isset __isset;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_do_not_cache(const bool val) {
    do_not_cache = val;
    __isset.do_not_cache = true;
  }

  void __set_queues(const std::vector<std::string> & val) {
    queues = val;
    __isset.queues = true;
  }

  void __set_handles(const std::vector<TUniqueId> & val) {
    handles = val;
    __isset.handles = true;
  }

  void __set_reservations(const std::vector<TUniqueId> & val) {
    reservations = val;
    __isset.reservations = true;
  }

  bool operator == (const TLlamaAMAdminReleaseRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (__isset.do_not_cache != rhs.__isset.do_not_cache)
      return false;
    else if (__isset.do_not_cache && !(do_not_cache == rhs.do_not_cache))
      return false;
    if (__isset.queues != rhs.__isset.queues)
      return false;
    else if (__isset.queues && !(queues == rhs.queues))
      return false;
    if (__isset.handles != rhs.__isset.handles)
      return false;
    else if (__isset.handles && !(handles == rhs.handles))
      return false;
    if (__isset.reservations != rhs.__isset.reservations)
      return false;
    else if (__isset.reservations && !(reservations == rhs.reservations))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMAdminReleaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMAdminReleaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMAdminReleaseRequest &a, TLlamaAMAdminReleaseRequest &b);


class TLlamaAMAdminReleaseResponse {
 public:

  static const char* ascii_fingerprint; // = "5A96C4E87CB5680F602C8C8BC07FBFCE";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x96,0xC4,0xE8,0x7C,0xB5,0x68,0x0F,0x60,0x2C,0x8C,0x8B,0xC0,0x7F,0xBF,0xCE};

  TLlamaAMAdminReleaseResponse() {
  }

  virtual ~TLlamaAMAdminReleaseResponse() throw() {}

  TStatus status;

  void __set_status(const TStatus& val) {
    status = val;
  }

  bool operator == (const TLlamaAMAdminReleaseResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMAdminReleaseResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMAdminReleaseResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMAdminReleaseResponse &a, TLlamaAMAdminReleaseResponse &b);

typedef struct _TLlamaAMAdminEmptyCacheRequest__isset {
  _TLlamaAMAdminEmptyCacheRequest__isset() : allQueues(true), queues(false) {}
  bool allQueues;
  bool queues;
} _TLlamaAMAdminEmptyCacheRequest__isset;

class TLlamaAMAdminEmptyCacheRequest {
 public:

  static const char* ascii_fingerprint; // = "B5CC5999E4CF83DCFBD130ED81B921A5";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0xCC,0x59,0x99,0xE4,0xCF,0x83,0xDC,0xFB,0xD1,0x30,0xED,0x81,0xB9,0x21,0xA5};

  TLlamaAMAdminEmptyCacheRequest() : version((TLlamaServiceVersion::type)0), allQueues(false) {
  }

  virtual ~TLlamaAMAdminEmptyCacheRequest() throw() {}

  TLlamaServiceVersion::type version;
  bool allQueues;
  std::vector<std::string>  queues;

  _TLlamaAMAdminEmptyCacheRequest__isset __isset;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_allQueues(const bool val) {
    allQueues = val;
    __isset.allQueues = true;
  }

  void __set_queues(const std::vector<std::string> & val) {
    queues = val;
    __isset.queues = true;
  }

  bool operator == (const TLlamaAMAdminEmptyCacheRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (__isset.allQueues != rhs.__isset.allQueues)
      return false;
    else if (__isset.allQueues && !(allQueues == rhs.allQueues))
      return false;
    if (__isset.queues != rhs.__isset.queues)
      return false;
    else if (__isset.queues && !(queues == rhs.queues))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMAdminEmptyCacheRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMAdminEmptyCacheRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMAdminEmptyCacheRequest &a, TLlamaAMAdminEmptyCacheRequest &b);


class TLlamaAMAdminEmptyCacheResponse {
 public:

  static const char* ascii_fingerprint; // = "5A96C4E87CB5680F602C8C8BC07FBFCE";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x96,0xC4,0xE8,0x7C,0xB5,0x68,0x0F,0x60,0x2C,0x8C,0x8B,0xC0,0x7F,0xBF,0xCE};

  TLlamaAMAdminEmptyCacheResponse() {
  }

  virtual ~TLlamaAMAdminEmptyCacheResponse() throw() {}

  TStatus status;

  void __set_status(const TStatus& val) {
    status = val;
  }

  bool operator == (const TLlamaAMAdminEmptyCacheResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMAdminEmptyCacheResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMAdminEmptyCacheResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMAdminEmptyCacheResponse &a, TLlamaAMAdminEmptyCacheResponse &b);


class TLlamaNMRegisterRequest {
 public:

  static const char* ascii_fingerprint; // = "DCF44E72A91B64CD636117316604EE19";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0xF4,0x4E,0x72,0xA9,0x1B,0x64,0xCD,0x63,0x61,0x17,0x31,0x66,0x04,0xEE,0x19};

  TLlamaNMRegisterRequest() : version((TLlamaServiceVersion::type)0) {
  }

  virtual ~TLlamaNMRegisterRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId client_id;
  TNetworkAddress notification_callback_service;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_client_id(const TUniqueId& val) {
    client_id = val;
  }

  void __set_notification_callback_service(const TNetworkAddress& val) {
    notification_callback_service = val;
  }

  bool operator == (const TLlamaNMRegisterRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    if (!(notification_callback_service == rhs.notification_callback_service))
      return false;
    return true;
  }
  bool operator != (const TLlamaNMRegisterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaNMRegisterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaNMRegisterRequest &a, TLlamaNMRegisterRequest &b);

typedef struct _TLlamaNMRegisterResponse__isset {
  _TLlamaNMRegisterResponse__isset() : nm_handle(false) {}
  bool nm_handle;
} _TLlamaNMRegisterResponse__isset;

class TLlamaNMRegisterResponse {
 public:

  static const char* ascii_fingerprint; // = "B27966211E1E9D69DFBF9D9ED7D306C4";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x79,0x66,0x21,0x1E,0x1E,0x9D,0x69,0xDF,0xBF,0x9D,0x9E,0xD7,0xD3,0x06,0xC4};

  TLlamaNMRegisterResponse() {
  }

  virtual ~TLlamaNMRegisterResponse() throw() {}

  TStatus status;
  TUniqueId nm_handle;

  _TLlamaNMRegisterResponse__isset __isset;

  void __set_status(const TStatus& val) {
    status = val;
  }

  void __set_nm_handle(const TUniqueId& val) {
    nm_handle = val;
    __isset.nm_handle = true;
  }

  bool operator == (const TLlamaNMRegisterResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.nm_handle != rhs.__isset.nm_handle)
      return false;
    else if (__isset.nm_handle && !(nm_handle == rhs.nm_handle))
      return false;
    return true;
  }
  bool operator != (const TLlamaNMRegisterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaNMRegisterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaNMRegisterResponse &a, TLlamaNMRegisterResponse &b);


class TLlamaNMUnregisterRequest {
 public:

  static const char* ascii_fingerprint; // = "C65535C1E1958EED5D673504D80CEAFE";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x55,0x35,0xC1,0xE1,0x95,0x8E,0xED,0x5D,0x67,0x35,0x04,0xD8,0x0C,0xEA,0xFE};

  TLlamaNMUnregisterRequest() : version((TLlamaServiceVersion::type)0) {
  }

  virtual ~TLlamaNMUnregisterRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId nm_handle;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_nm_handle(const TUniqueId& val) {
    nm_handle = val;
  }

  bool operator == (const TLlamaNMUnregisterRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(nm_handle == rhs.nm_handle))
      return false;
    return true;
  }
  bool operator != (const TLlamaNMUnregisterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaNMUnregisterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaNMUnregisterRequest &a, TLlamaNMUnregisterRequest &b);


class TLlamaNMUnregisterResponse {
 public:

  static const char* ascii_fingerprint; // = "5A96C4E87CB5680F602C8C8BC07FBFCE";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x96,0xC4,0xE8,0x7C,0xB5,0x68,0x0F,0x60,0x2C,0x8C,0x8B,0xC0,0x7F,0xBF,0xCE};

  TLlamaNMUnregisterResponse() {
  }

  virtual ~TLlamaNMUnregisterResponse() throw() {}

  TStatus status;

  void __set_status(const TStatus& val) {
    status = val;
  }

  bool operator == (const TLlamaNMUnregisterResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TLlamaNMUnregisterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaNMUnregisterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaNMUnregisterResponse &a, TLlamaNMUnregisterResponse &b);

typedef struct _TLlamaAMNotificationRequest__isset {
  _TLlamaAMNotificationRequest__isset() : allocated_reservation_ids(false), allocated_resources(false), rejected_reservation_ids(false), rejected_client_resource_ids(false), lost_client_resource_ids(false), preempted_reservation_ids(false), preempted_client_resource_ids(false), admin_released_reservation_ids(false), lost_reservation_ids(false) {}
  bool allocated_reservation_ids;
  bool allocated_resources;
  bool rejected_reservation_ids;
  bool rejected_client_resource_ids;
  bool lost_client_resource_ids;
  bool preempted_reservation_ids;
  bool preempted_client_resource_ids;
  bool admin_released_reservation_ids;
  bool lost_reservation_ids;
} _TLlamaAMNotificationRequest__isset;

class TLlamaAMNotificationRequest {
 public:

  static const char* ascii_fingerprint; // = "70A83BCD55C8F8E6E40922436DEE3982";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xA8,0x3B,0xCD,0x55,0xC8,0xF8,0xE6,0xE4,0x09,0x22,0x43,0x6D,0xEE,0x39,0x82};

  TLlamaAMNotificationRequest() : version((TLlamaServiceVersion::type)0), heartbeat(0) {
  }

  virtual ~TLlamaAMNotificationRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId am_handle;
  bool heartbeat;
  std::vector<TUniqueId>  allocated_reservation_ids;
  std::vector<TAllocatedResource>  allocated_resources;
  std::vector<TUniqueId>  rejected_reservation_ids;
  std::vector<TUniqueId>  rejected_client_resource_ids;
  std::vector<TUniqueId>  lost_client_resource_ids;
  std::vector<TUniqueId>  preempted_reservation_ids;
  std::vector<TUniqueId>  preempted_client_resource_ids;
  std::vector<TUniqueId>  admin_released_reservation_ids;
  std::vector<TUniqueId>  lost_reservation_ids;

  _TLlamaAMNotificationRequest__isset __isset;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_am_handle(const TUniqueId& val) {
    am_handle = val;
  }

  void __set_heartbeat(const bool val) {
    heartbeat = val;
  }

  void __set_allocated_reservation_ids(const std::vector<TUniqueId> & val) {
    allocated_reservation_ids = val;
    __isset.allocated_reservation_ids = true;
  }

  void __set_allocated_resources(const std::vector<TAllocatedResource> & val) {
    allocated_resources = val;
    __isset.allocated_resources = true;
  }

  void __set_rejected_reservation_ids(const std::vector<TUniqueId> & val) {
    rejected_reservation_ids = val;
    __isset.rejected_reservation_ids = true;
  }

  void __set_rejected_client_resource_ids(const std::vector<TUniqueId> & val) {
    rejected_client_resource_ids = val;
    __isset.rejected_client_resource_ids = true;
  }

  void __set_lost_client_resource_ids(const std::vector<TUniqueId> & val) {
    lost_client_resource_ids = val;
    __isset.lost_client_resource_ids = true;
  }

  void __set_preempted_reservation_ids(const std::vector<TUniqueId> & val) {
    preempted_reservation_ids = val;
    __isset.preempted_reservation_ids = true;
  }

  void __set_preempted_client_resource_ids(const std::vector<TUniqueId> & val) {
    preempted_client_resource_ids = val;
    __isset.preempted_client_resource_ids = true;
  }

  void __set_admin_released_reservation_ids(const std::vector<TUniqueId> & val) {
    admin_released_reservation_ids = val;
    __isset.admin_released_reservation_ids = true;
  }

  void __set_lost_reservation_ids(const std::vector<TUniqueId> & val) {
    lost_reservation_ids = val;
    __isset.lost_reservation_ids = true;
  }

  bool operator == (const TLlamaAMNotificationRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(am_handle == rhs.am_handle))
      return false;
    if (!(heartbeat == rhs.heartbeat))
      return false;
    if (__isset.allocated_reservation_ids != rhs.__isset.allocated_reservation_ids)
      return false;
    else if (__isset.allocated_reservation_ids && !(allocated_reservation_ids == rhs.allocated_reservation_ids))
      return false;
    if (__isset.allocated_resources != rhs.__isset.allocated_resources)
      return false;
    else if (__isset.allocated_resources && !(allocated_resources == rhs.allocated_resources))
      return false;
    if (__isset.rejected_reservation_ids != rhs.__isset.rejected_reservation_ids)
      return false;
    else if (__isset.rejected_reservation_ids && !(rejected_reservation_ids == rhs.rejected_reservation_ids))
      return false;
    if (__isset.rejected_client_resource_ids != rhs.__isset.rejected_client_resource_ids)
      return false;
    else if (__isset.rejected_client_resource_ids && !(rejected_client_resource_ids == rhs.rejected_client_resource_ids))
      return false;
    if (__isset.lost_client_resource_ids != rhs.__isset.lost_client_resource_ids)
      return false;
    else if (__isset.lost_client_resource_ids && !(lost_client_resource_ids == rhs.lost_client_resource_ids))
      return false;
    if (__isset.preempted_reservation_ids != rhs.__isset.preempted_reservation_ids)
      return false;
    else if (__isset.preempted_reservation_ids && !(preempted_reservation_ids == rhs.preempted_reservation_ids))
      return false;
    if (__isset.preempted_client_resource_ids != rhs.__isset.preempted_client_resource_ids)
      return false;
    else if (__isset.preempted_client_resource_ids && !(preempted_client_resource_ids == rhs.preempted_client_resource_ids))
      return false;
    if (__isset.admin_released_reservation_ids != rhs.__isset.admin_released_reservation_ids)
      return false;
    else if (__isset.admin_released_reservation_ids && !(admin_released_reservation_ids == rhs.admin_released_reservation_ids))
      return false;
    if (__isset.lost_reservation_ids != rhs.__isset.lost_reservation_ids)
      return false;
    else if (__isset.lost_reservation_ids && !(lost_reservation_ids == rhs.lost_reservation_ids))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMNotificationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMNotificationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMNotificationRequest &a, TLlamaAMNotificationRequest &b);


class TLlamaAMNotificationResponse {
 public:

  static const char* ascii_fingerprint; // = "5A96C4E87CB5680F602C8C8BC07FBFCE";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x96,0xC4,0xE8,0x7C,0xB5,0x68,0x0F,0x60,0x2C,0x8C,0x8B,0xC0,0x7F,0xBF,0xCE};

  TLlamaAMNotificationResponse() {
  }

  virtual ~TLlamaAMNotificationResponse() throw() {}

  TStatus status;

  void __set_status(const TStatus& val) {
    status = val;
  }

  bool operator == (const TLlamaAMNotificationResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TLlamaAMNotificationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaAMNotificationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaAMNotificationResponse &a, TLlamaAMNotificationResponse &b);

typedef struct _TLlamaNMNotificationRequest__isset {
  _TLlamaNMNotificationRequest__isset() : preempted_rm_resource_ids(false) {}
  bool preempted_rm_resource_ids;
} _TLlamaNMNotificationRequest__isset;

class TLlamaNMNotificationRequest {
 public:

  static const char* ascii_fingerprint; // = "176BC4EF00CD4681A9C94DEF49FD4ABF";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x6B,0xC4,0xEF,0x00,0xCD,0x46,0x81,0xA9,0xC9,0x4D,0xEF,0x49,0xFD,0x4A,0xBF};

  TLlamaNMNotificationRequest() : version((TLlamaServiceVersion::type)0) {
  }

  virtual ~TLlamaNMNotificationRequest() throw() {}

  TLlamaServiceVersion::type version;
  TUniqueId nm_handle;
  TNodeCapacity node_capacity;
  std::vector<std::string>  preempted_rm_resource_ids;

  _TLlamaNMNotificationRequest__isset __isset;

  void __set_version(const TLlamaServiceVersion::type val) {
    version = val;
  }

  void __set_nm_handle(const TUniqueId& val) {
    nm_handle = val;
  }

  void __set_node_capacity(const TNodeCapacity& val) {
    node_capacity = val;
  }

  void __set_preempted_rm_resource_ids(const std::vector<std::string> & val) {
    preempted_rm_resource_ids = val;
    __isset.preempted_rm_resource_ids = true;
  }

  bool operator == (const TLlamaNMNotificationRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(nm_handle == rhs.nm_handle))
      return false;
    if (!(node_capacity == rhs.node_capacity))
      return false;
    if (!(preempted_rm_resource_ids == rhs.preempted_rm_resource_ids))
      return false;
    return true;
  }
  bool operator != (const TLlamaNMNotificationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaNMNotificationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaNMNotificationRequest &a, TLlamaNMNotificationRequest &b);


class TLlamaNMNotificationResponse {
 public:

  static const char* ascii_fingerprint; // = "5A96C4E87CB5680F602C8C8BC07FBFCE";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x96,0xC4,0xE8,0x7C,0xB5,0x68,0x0F,0x60,0x2C,0x8C,0x8B,0xC0,0x7F,0xBF,0xCE};

  TLlamaNMNotificationResponse() {
  }

  virtual ~TLlamaNMNotificationResponse() throw() {}

  TStatus status;

  void __set_status(const TStatus& val) {
    status = val;
  }

  bool operator == (const TLlamaNMNotificationResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TLlamaNMNotificationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLlamaNMNotificationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLlamaNMNotificationResponse &a, TLlamaNMNotificationResponse &b);

} // namespace

#endif
