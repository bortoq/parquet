/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Planner_TYPES_H
#define Planner_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"
#include "Exprs_types.h"
#include "DataSinks_types.h"
#include "PlanNodes_types.h"
#include "Partitions_types.h"


namespace impala {

typedef struct _TPlanFragment__isset {
  _TPlanFragment__isset() : plan(false), output_exprs(false), output_sink(false) {}
  bool plan;
  bool output_exprs;
  bool output_sink;
} _TPlanFragment__isset;

class TPlanFragment {
 public:

  static const char* ascii_fingerprint; // = "920087297F18D2A51686529E4B128182";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x00,0x87,0x29,0x7F,0x18,0xD2,0xA5,0x16,0x86,0x52,0x9E,0x4B,0x12,0x81,0x82};

  TPlanFragment() : display_name() {
  }

  virtual ~TPlanFragment() throw() {}

  std::string display_name;
   ::impala::TPlan plan;
  std::vector< ::impala::TExpr>  output_exprs;
   ::impala::TDataSink output_sink;
   ::impala::TDataPartition partition;

  _TPlanFragment__isset __isset;

  void __set_display_name(const std::string& val) {
    display_name = val;
  }

  void __set_plan(const  ::impala::TPlan& val) {
    plan = val;
    __isset.plan = true;
  }

  void __set_output_exprs(const std::vector< ::impala::TExpr> & val) {
    output_exprs = val;
    __isset.output_exprs = true;
  }

  void __set_output_sink(const  ::impala::TDataSink& val) {
    output_sink = val;
    __isset.output_sink = true;
  }

  void __set_partition(const  ::impala::TDataPartition& val) {
    partition = val;
  }

  bool operator == (const TPlanFragment & rhs) const
  {
    if (!(display_name == rhs.display_name))
      return false;
    if (__isset.plan != rhs.__isset.plan)
      return false;
    else if (__isset.plan && !(plan == rhs.plan))
      return false;
    if (__isset.output_exprs != rhs.__isset.output_exprs)
      return false;
    else if (__isset.output_exprs && !(output_exprs == rhs.output_exprs))
      return false;
    if (__isset.output_sink != rhs.__isset.output_sink)
      return false;
    else if (__isset.output_sink && !(output_sink == rhs.output_sink))
      return false;
    if (!(partition == rhs.partition))
      return false;
    return true;
  }
  bool operator != (const TPlanFragment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPlanFragment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPlanFragment &a, TPlanFragment &b);

typedef struct _TScanRangeLocation__isset {
  _TScanRangeLocation__isset() : volume_id(true), is_cached(true) {}
  bool volume_id;
  bool is_cached;
} _TScanRangeLocation__isset;

class TScanRangeLocation {
 public:

  static const char* ascii_fingerprint; // = "31B9FE566FFFFC4D48B27DDAFB13074C";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xB9,0xFE,0x56,0x6F,0xFF,0xFC,0x4D,0x48,0xB2,0x7D,0xDA,0xFB,0x13,0x07,0x4C};

  TScanRangeLocation() : volume_id(-1), is_cached(false) {
  }

  virtual ~TScanRangeLocation() throw() {}

   ::impala::TNetworkAddress server;
  int32_t volume_id;
  bool is_cached;

  _TScanRangeLocation__isset __isset;

  void __set_server(const  ::impala::TNetworkAddress& val) {
    server = val;
  }

  void __set_volume_id(const int32_t val) {
    volume_id = val;
    __isset.volume_id = true;
  }

  void __set_is_cached(const bool val) {
    is_cached = val;
    __isset.is_cached = true;
  }

  bool operator == (const TScanRangeLocation & rhs) const
  {
    if (!(server == rhs.server))
      return false;
    if (__isset.volume_id != rhs.__isset.volume_id)
      return false;
    else if (__isset.volume_id && !(volume_id == rhs.volume_id))
      return false;
    if (__isset.is_cached != rhs.__isset.is_cached)
      return false;
    else if (__isset.is_cached && !(is_cached == rhs.is_cached))
      return false;
    return true;
  }
  bool operator != (const TScanRangeLocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TScanRangeLocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TScanRangeLocation &a, TScanRangeLocation &b);

typedef struct _TScanRangeLocations__isset {
  _TScanRangeLocations__isset() : locations(false) {}
  bool locations;
} _TScanRangeLocations__isset;

class TScanRangeLocations {
 public:

  static const char* ascii_fingerprint; // = "4AF7ED469E98975EFA13A96A2A1A7CBA";
  static const uint8_t binary_fingerprint[16]; // = {0x4A,0xF7,0xED,0x46,0x9E,0x98,0x97,0x5E,0xFA,0x13,0xA9,0x6A,0x2A,0x1A,0x7C,0xBA};

  TScanRangeLocations() {
  }

  virtual ~TScanRangeLocations() throw() {}

   ::impala::TScanRange scan_range;
  std::vector<TScanRangeLocation>  locations;

  _TScanRangeLocations__isset __isset;

  void __set_scan_range(const  ::impala::TScanRange& val) {
    scan_range = val;
  }

  void __set_locations(const std::vector<TScanRangeLocation> & val) {
    locations = val;
    __isset.locations = true;
  }

  bool operator == (const TScanRangeLocations & rhs) const
  {
    if (!(scan_range == rhs.scan_range))
      return false;
    if (!(locations == rhs.locations))
      return false;
    return true;
  }
  bool operator != (const TScanRangeLocations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TScanRangeLocations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TScanRangeLocations &a, TScanRangeLocations &b);

} // namespace

#endif
