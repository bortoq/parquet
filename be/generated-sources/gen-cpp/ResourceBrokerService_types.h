/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ResourceBrokerService_TYPES_H
#define ResourceBrokerService_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Status_types.h"
#include "Types_types.h"
#include "Llama_types.h"


namespace impala {

struct TResourceBrokerServiceVersion {
  enum type {
    V1 = 0
  };
};

extern const std::map<int, const char*> _TResourceBrokerServiceVersion_VALUES_TO_NAMES;

typedef struct _TResourceBrokerRegisterRequest__isset {
  _TResourceBrokerRegisterRequest__isset() : client_process_id(false), notification_callback_service(false) {}
  bool client_process_id;
  bool notification_callback_service;
} _TResourceBrokerRegisterRequest__isset;

class TResourceBrokerRegisterRequest {
 public:

  static const char* ascii_fingerprint; // = "21FB5195C25918E6400575FDE8FB9078";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xFB,0x51,0x95,0xC2,0x59,0x18,0xE6,0x40,0x05,0x75,0xFD,0xE8,0xFB,0x90,0x78};

  TResourceBrokerRegisterRequest() : version((TResourceBrokerServiceVersion::type)0), client_process_id(0) {
  }

  virtual ~TResourceBrokerRegisterRequest() throw() {}

  TResourceBrokerServiceVersion::type version;
  int32_t client_process_id;
   ::impala::TNetworkAddress notification_callback_service;

  _TResourceBrokerRegisterRequest__isset __isset;

  void __set_version(const TResourceBrokerServiceVersion::type val) {
    version = val;
  }

  void __set_client_process_id(const int32_t val) {
    client_process_id = val;
    __isset.client_process_id = true;
  }

  void __set_notification_callback_service(const  ::impala::TNetworkAddress& val) {
    notification_callback_service = val;
    __isset.notification_callback_service = true;
  }

  bool operator == (const TResourceBrokerRegisterRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (__isset.client_process_id != rhs.__isset.client_process_id)
      return false;
    else if (__isset.client_process_id && !(client_process_id == rhs.client_process_id))
      return false;
    if (__isset.notification_callback_service != rhs.__isset.notification_callback_service)
      return false;
    else if (__isset.notification_callback_service && !(notification_callback_service == rhs.notification_callback_service))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerRegisterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerRegisterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerRegisterRequest &a, TResourceBrokerRegisterRequest &b);

typedef struct _TResourceBrokerRegisterResponse__isset {
  _TResourceBrokerRegisterResponse__isset() : status(false), irb_handle(false) {}
  bool status;
  bool irb_handle;
} _TResourceBrokerRegisterResponse__isset;

class TResourceBrokerRegisterResponse {
 public:

  static const char* ascii_fingerprint; // = "B871C1EEFCBD277FA45BDEAC6274D107";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0x71,0xC1,0xEE,0xFC,0xBD,0x27,0x7F,0xA4,0x5B,0xDE,0xAC,0x62,0x74,0xD1,0x07};

  TResourceBrokerRegisterResponse() {
  }

  virtual ~TResourceBrokerRegisterResponse() throw() {}

   ::impala::TStatus status;
   ::impala::TUniqueId irb_handle;

  _TResourceBrokerRegisterResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
    __isset.status = true;
  }

  void __set_irb_handle(const  ::impala::TUniqueId& val) {
    irb_handle = val;
    __isset.irb_handle = true;
  }

  bool operator == (const TResourceBrokerRegisterResponse & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.irb_handle != rhs.__isset.irb_handle)
      return false;
    else if (__isset.irb_handle && !(irb_handle == rhs.irb_handle))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerRegisterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerRegisterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerRegisterResponse &a, TResourceBrokerRegisterResponse &b);

typedef struct _TResourceBrokerUnregisterRequest__isset {
  _TResourceBrokerUnregisterRequest__isset() : version(false), irb_handle(false) {}
  bool version;
  bool irb_handle;
} _TResourceBrokerUnregisterRequest__isset;

class TResourceBrokerUnregisterRequest {
 public:

  static const char* ascii_fingerprint; // = "E2D4F3BAEC673D934E888C66AB34B58C";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0xD4,0xF3,0xBA,0xEC,0x67,0x3D,0x93,0x4E,0x88,0x8C,0x66,0xAB,0x34,0xB5,0x8C};

  TResourceBrokerUnregisterRequest() : version((TResourceBrokerServiceVersion::type)0) {
  }

  virtual ~TResourceBrokerUnregisterRequest() throw() {}

  TResourceBrokerServiceVersion::type version;
   ::impala::TUniqueId irb_handle;

  _TResourceBrokerUnregisterRequest__isset __isset;

  void __set_version(const TResourceBrokerServiceVersion::type val) {
    version = val;
    __isset.version = true;
  }

  void __set_irb_handle(const  ::impala::TUniqueId& val) {
    irb_handle = val;
    __isset.irb_handle = true;
  }

  bool operator == (const TResourceBrokerUnregisterRequest & rhs) const
  {
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.irb_handle != rhs.__isset.irb_handle)
      return false;
    else if (__isset.irb_handle && !(irb_handle == rhs.irb_handle))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerUnregisterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerUnregisterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerUnregisterRequest &a, TResourceBrokerUnregisterRequest &b);

typedef struct _TResourceBrokerUnregisterResponse__isset {
  _TResourceBrokerUnregisterResponse__isset() : status(false) {}
  bool status;
} _TResourceBrokerUnregisterResponse__isset;

class TResourceBrokerUnregisterResponse {
 public:

  static const char* ascii_fingerprint; // = "BA609E39B08A478BB74F0F877E3C5C4A";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x60,0x9E,0x39,0xB0,0x8A,0x47,0x8B,0xB7,0x4F,0x0F,0x87,0x7E,0x3C,0x5C,0x4A};

  TResourceBrokerUnregisterResponse() {
  }

  virtual ~TResourceBrokerUnregisterResponse() throw() {}

   ::impala::TStatus status;

  _TResourceBrokerUnregisterResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
    __isset.status = true;
  }

  bool operator == (const TResourceBrokerUnregisterResponse & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerUnregisterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerUnregisterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerUnregisterResponse &a, TResourceBrokerUnregisterResponse &b);

typedef struct _TResourceBrokerExpansionRequest__isset {
  _TResourceBrokerExpansionRequest__isset() : resource(false), reservation_id(false), request_timeout(false) {}
  bool resource;
  bool reservation_id;
  bool request_timeout;
} _TResourceBrokerExpansionRequest__isset;

class TResourceBrokerExpansionRequest {
 public:

  static const char* ascii_fingerprint; // = "51FF51E51C16C589E78C5ECD01A58341";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0xFF,0x51,0xE5,0x1C,0x16,0xC5,0x89,0xE7,0x8C,0x5E,0xCD,0x01,0xA5,0x83,0x41};

  TResourceBrokerExpansionRequest() : version((TResourceBrokerServiceVersion::type)0), request_timeout(0) {
  }

  virtual ~TResourceBrokerExpansionRequest() throw() {}

  TResourceBrokerServiceVersion::type version;
   ::llama::TResource resource;
   ::impala::TUniqueId reservation_id;
  int64_t request_timeout;

  _TResourceBrokerExpansionRequest__isset __isset;

  void __set_version(const TResourceBrokerServiceVersion::type val) {
    version = val;
  }

  void __set_resource(const  ::llama::TResource& val) {
    resource = val;
    __isset.resource = true;
  }

  void __set_reservation_id(const  ::impala::TUniqueId& val) {
    reservation_id = val;
    __isset.reservation_id = true;
  }

  void __set_request_timeout(const int64_t val) {
    request_timeout = val;
    __isset.request_timeout = true;
  }

  bool operator == (const TResourceBrokerExpansionRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (__isset.resource != rhs.__isset.resource)
      return false;
    else if (__isset.resource && !(resource == rhs.resource))
      return false;
    if (__isset.reservation_id != rhs.__isset.reservation_id)
      return false;
    else if (__isset.reservation_id && !(reservation_id == rhs.reservation_id))
      return false;
    if (__isset.request_timeout != rhs.__isset.request_timeout)
      return false;
    else if (__isset.request_timeout && !(request_timeout == rhs.request_timeout))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerExpansionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerExpansionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerExpansionRequest &a, TResourceBrokerExpansionRequest &b);

typedef struct _TResourceBrokerExpansionResponse__isset {
  _TResourceBrokerExpansionResponse__isset() : reservation_id(false), allocated_resources(false) {}
  bool reservation_id;
  bool allocated_resources;
} _TResourceBrokerExpansionResponse__isset;

class TResourceBrokerExpansionResponse {
 public:

  static const char* ascii_fingerprint; // = "A37BD535DC3C54EBB2F9E556054003DB";
  static const uint8_t binary_fingerprint[16]; // = {0xA3,0x7B,0xD5,0x35,0xDC,0x3C,0x54,0xEB,0xB2,0xF9,0xE5,0x56,0x05,0x40,0x03,0xDB};

  TResourceBrokerExpansionResponse() {
  }

  virtual ~TResourceBrokerExpansionResponse() throw() {}

   ::impala::TUniqueId reservation_id;
  std::map< ::impala::TNetworkAddress,  ::llama::TAllocatedResource>  allocated_resources;

  _TResourceBrokerExpansionResponse__isset __isset;

  void __set_reservation_id(const  ::impala::TUniqueId& val) {
    reservation_id = val;
    __isset.reservation_id = true;
  }

  void __set_allocated_resources(const std::map< ::impala::TNetworkAddress,  ::llama::TAllocatedResource> & val) {
    allocated_resources = val;
    __isset.allocated_resources = true;
  }

  bool operator == (const TResourceBrokerExpansionResponse & rhs) const
  {
    if (__isset.reservation_id != rhs.__isset.reservation_id)
      return false;
    else if (__isset.reservation_id && !(reservation_id == rhs.reservation_id))
      return false;
    if (__isset.allocated_resources != rhs.__isset.allocated_resources)
      return false;
    else if (__isset.allocated_resources && !(allocated_resources == rhs.allocated_resources))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerExpansionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerExpansionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerExpansionResponse &a, TResourceBrokerExpansionResponse &b);

typedef struct _TResourceBrokerReservationRequest__isset {
  _TResourceBrokerReservationRequest__isset() : irb_handle(false), queue(false), resources(false), gang(false), request_timeout(false), user(false) {}
  bool irb_handle;
  bool queue;
  bool resources;
  bool gang;
  bool request_timeout;
  bool user;
} _TResourceBrokerReservationRequest__isset;

class TResourceBrokerReservationRequest {
 public:

  static const char* ascii_fingerprint; // = "1046D7018D6778F749E486BF6E6407E4";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x46,0xD7,0x01,0x8D,0x67,0x78,0xF7,0x49,0xE4,0x86,0xBF,0x6E,0x64,0x07,0xE4};

  TResourceBrokerReservationRequest() : version((TResourceBrokerServiceVersion::type)0), queue(), gang(0), request_timeout(0), user() {
  }

  virtual ~TResourceBrokerReservationRequest() throw() {}

  TResourceBrokerServiceVersion::type version;
   ::impala::TUniqueId irb_handle;
  std::string queue;
  std::vector< ::llama::TResource>  resources;
  bool gang;
  int64_t request_timeout;
  std::string user;

  _TResourceBrokerReservationRequest__isset __isset;

  void __set_version(const TResourceBrokerServiceVersion::type val) {
    version = val;
  }

  void __set_irb_handle(const  ::impala::TUniqueId& val) {
    irb_handle = val;
    __isset.irb_handle = true;
  }

  void __set_queue(const std::string& val) {
    queue = val;
    __isset.queue = true;
  }

  void __set_resources(const std::vector< ::llama::TResource> & val) {
    resources = val;
    __isset.resources = true;
  }

  void __set_gang(const bool val) {
    gang = val;
    __isset.gang = true;
  }

  void __set_request_timeout(const int64_t val) {
    request_timeout = val;
    __isset.request_timeout = true;
  }

  void __set_user(const std::string& val) {
    user = val;
    __isset.user = true;
  }

  bool operator == (const TResourceBrokerReservationRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (__isset.irb_handle != rhs.__isset.irb_handle)
      return false;
    else if (__isset.irb_handle && !(irb_handle == rhs.irb_handle))
      return false;
    if (__isset.queue != rhs.__isset.queue)
      return false;
    else if (__isset.queue && !(queue == rhs.queue))
      return false;
    if (__isset.resources != rhs.__isset.resources)
      return false;
    else if (__isset.resources && !(resources == rhs.resources))
      return false;
    if (__isset.gang != rhs.__isset.gang)
      return false;
    else if (__isset.gang && !(gang == rhs.gang))
      return false;
    if (__isset.request_timeout != rhs.__isset.request_timeout)
      return false;
    else if (__isset.request_timeout && !(request_timeout == rhs.request_timeout))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerReservationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerReservationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerReservationRequest &a, TResourceBrokerReservationRequest &b);

typedef struct _TResourceBrokerReservationResponse__isset {
  _TResourceBrokerReservationResponse__isset() : status(false), reservation_id(false), allocated_resources(false) {}
  bool status;
  bool reservation_id;
  bool allocated_resources;
} _TResourceBrokerReservationResponse__isset;

class TResourceBrokerReservationResponse {
 public:

  static const char* ascii_fingerprint; // = "AEAF70CC7C8354B0CAC42DFB1418C724";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0xAF,0x70,0xCC,0x7C,0x83,0x54,0xB0,0xCA,0xC4,0x2D,0xFB,0x14,0x18,0xC7,0x24};

  TResourceBrokerReservationResponse() {
  }

  virtual ~TResourceBrokerReservationResponse() throw() {}

   ::impala::TStatus status;
   ::impala::TUniqueId reservation_id;
  std::map< ::impala::TNetworkAddress,  ::llama::TAllocatedResource>  allocated_resources;

  _TResourceBrokerReservationResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
    __isset.status = true;
  }

  void __set_reservation_id(const  ::impala::TUniqueId& val) {
    reservation_id = val;
    __isset.reservation_id = true;
  }

  void __set_allocated_resources(const std::map< ::impala::TNetworkAddress,  ::llama::TAllocatedResource> & val) {
    allocated_resources = val;
    __isset.allocated_resources = true;
  }

  bool operator == (const TResourceBrokerReservationResponse & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.reservation_id != rhs.__isset.reservation_id)
      return false;
    else if (__isset.reservation_id && !(reservation_id == rhs.reservation_id))
      return false;
    if (__isset.allocated_resources != rhs.__isset.allocated_resources)
      return false;
    else if (__isset.allocated_resources && !(allocated_resources == rhs.allocated_resources))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerReservationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerReservationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerReservationResponse &a, TResourceBrokerReservationResponse &b);

typedef struct _TResourceBrokerReleaseRequest__isset {
  _TResourceBrokerReleaseRequest__isset() : version(false), irb_handle(false), reservation_id(false) {}
  bool version;
  bool irb_handle;
  bool reservation_id;
} _TResourceBrokerReleaseRequest__isset;

class TResourceBrokerReleaseRequest {
 public:

  static const char* ascii_fingerprint; // = "9726FCCB536868D5806373CE9976848E";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x26,0xFC,0xCB,0x53,0x68,0x68,0xD5,0x80,0x63,0x73,0xCE,0x99,0x76,0x84,0x8E};

  TResourceBrokerReleaseRequest() : version((TResourceBrokerServiceVersion::type)0) {
  }

  virtual ~TResourceBrokerReleaseRequest() throw() {}

  TResourceBrokerServiceVersion::type version;
   ::impala::TUniqueId irb_handle;
   ::impala::TUniqueId reservation_id;

  _TResourceBrokerReleaseRequest__isset __isset;

  void __set_version(const TResourceBrokerServiceVersion::type val) {
    version = val;
    __isset.version = true;
  }

  void __set_irb_handle(const  ::impala::TUniqueId& val) {
    irb_handle = val;
    __isset.irb_handle = true;
  }

  void __set_reservation_id(const  ::impala::TUniqueId& val) {
    reservation_id = val;
    __isset.reservation_id = true;
  }

  bool operator == (const TResourceBrokerReleaseRequest & rhs) const
  {
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.irb_handle != rhs.__isset.irb_handle)
      return false;
    else if (__isset.irb_handle && !(irb_handle == rhs.irb_handle))
      return false;
    if (__isset.reservation_id != rhs.__isset.reservation_id)
      return false;
    else if (__isset.reservation_id && !(reservation_id == rhs.reservation_id))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerReleaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerReleaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerReleaseRequest &a, TResourceBrokerReleaseRequest &b);

typedef struct _TResourceBrokerReleaseResponse__isset {
  _TResourceBrokerReleaseResponse__isset() : status(false) {}
  bool status;
} _TResourceBrokerReleaseResponse__isset;

class TResourceBrokerReleaseResponse {
 public:

  static const char* ascii_fingerprint; // = "BA609E39B08A478BB74F0F877E3C5C4A";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x60,0x9E,0x39,0xB0,0x8A,0x47,0x8B,0xB7,0x4F,0x0F,0x87,0x7E,0x3C,0x5C,0x4A};

  TResourceBrokerReleaseResponse() {
  }

  virtual ~TResourceBrokerReleaseResponse() throw() {}

   ::impala::TStatus status;

  _TResourceBrokerReleaseResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
    __isset.status = true;
  }

  bool operator == (const TResourceBrokerReleaseResponse & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerReleaseResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerReleaseResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerReleaseResponse &a, TResourceBrokerReleaseResponse &b);

typedef struct _TResourceBrokerNotificationPreemptionRequest__isset {
  _TResourceBrokerNotificationPreemptionRequest__isset() : preempted_rm_resource_ids(false) {}
  bool preempted_rm_resource_ids;
} _TResourceBrokerNotificationPreemptionRequest__isset;

class TResourceBrokerNotificationPreemptionRequest {
 public:

  static const char* ascii_fingerprint; // = "EE4D40E68039374D93838243069CCE4B";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x4D,0x40,0xE6,0x80,0x39,0x37,0x4D,0x93,0x83,0x82,0x43,0x06,0x9C,0xCE,0x4B};

  TResourceBrokerNotificationPreemptionRequest() : version((TResourceBrokerServiceVersion::type)0) {
  }

  virtual ~TResourceBrokerNotificationPreemptionRequest() throw() {}

  TResourceBrokerServiceVersion::type version;
  std::vector<std::string>  preempted_rm_resource_ids;

  _TResourceBrokerNotificationPreemptionRequest__isset __isset;

  void __set_version(const TResourceBrokerServiceVersion::type val) {
    version = val;
  }

  void __set_preempted_rm_resource_ids(const std::vector<std::string> & val) {
    preempted_rm_resource_ids = val;
    __isset.preempted_rm_resource_ids = true;
  }

  bool operator == (const TResourceBrokerNotificationPreemptionRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (__isset.preempted_rm_resource_ids != rhs.__isset.preempted_rm_resource_ids)
      return false;
    else if (__isset.preempted_rm_resource_ids && !(preempted_rm_resource_ids == rhs.preempted_rm_resource_ids))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerNotificationPreemptionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerNotificationPreemptionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerNotificationPreemptionRequest &a, TResourceBrokerNotificationPreemptionRequest &b);

typedef struct _TResourceBrokerNotificationPreemptionResponse__isset {
  _TResourceBrokerNotificationPreemptionResponse__isset() : status(false) {}
  bool status;
} _TResourceBrokerNotificationPreemptionResponse__isset;

class TResourceBrokerNotificationPreemptionResponse {
 public:

  static const char* ascii_fingerprint; // = "BA609E39B08A478BB74F0F877E3C5C4A";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x60,0x9E,0x39,0xB0,0x8A,0x47,0x8B,0xB7,0x4F,0x0F,0x87,0x7E,0x3C,0x5C,0x4A};

  TResourceBrokerNotificationPreemptionResponse() {
  }

  virtual ~TResourceBrokerNotificationPreemptionResponse() throw() {}

   ::impala::TStatus status;

  _TResourceBrokerNotificationPreemptionResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
    __isset.status = true;
  }

  bool operator == (const TResourceBrokerNotificationPreemptionResponse & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TResourceBrokerNotificationPreemptionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResourceBrokerNotificationPreemptionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResourceBrokerNotificationPreemptionResponse &a, TResourceBrokerNotificationPreemptionResponse &b);

} // namespace

#endif
