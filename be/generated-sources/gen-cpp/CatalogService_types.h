/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CatalogService_TYPES_H
#define CatalogService_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CatalogObjects_types.h"
#include "JniCatalog_types.h"
#include "Types_types.h"
#include "Status_types.h"
#include "Data_types.h"


namespace impala {

struct CatalogServiceVersion {
  enum type {
    V1 = 0
  };
};

extern const std::map<int, const char*> _CatalogServiceVersion_VALUES_TO_NAMES;

typedef struct _TCatalogUpdateResult__isset {
  _TCatalogUpdateResult__isset() : updated_catalog_object(false), removed_catalog_object(false) {}
  bool updated_catalog_object;
  bool removed_catalog_object;
} _TCatalogUpdateResult__isset;

class TCatalogUpdateResult {
 public:

  static const char* ascii_fingerprint; // = "F43AA6020A3E13C3645FFAF4C0BC89B7";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x3A,0xA6,0x02,0x0A,0x3E,0x13,0xC3,0x64,0x5F,0xFA,0xF4,0xC0,0xBC,0x89,0xB7};

  TCatalogUpdateResult() : version(0) {
  }

  virtual ~TCatalogUpdateResult() throw() {}

   ::impala::TUniqueId catalog_service_id;
  int64_t version;
   ::impala::TStatus status;
   ::impala::TCatalogObject updated_catalog_object;
   ::impala::TCatalogObject removed_catalog_object;

  _TCatalogUpdateResult__isset __isset;

  void __set_catalog_service_id(const  ::impala::TUniqueId& val) {
    catalog_service_id = val;
  }

  void __set_version(const int64_t val) {
    version = val;
  }

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
  }

  void __set_updated_catalog_object(const  ::impala::TCatalogObject& val) {
    updated_catalog_object = val;
    __isset.updated_catalog_object = true;
  }

  void __set_removed_catalog_object(const  ::impala::TCatalogObject& val) {
    removed_catalog_object = val;
    __isset.removed_catalog_object = true;
  }

  bool operator == (const TCatalogUpdateResult & rhs) const
  {
    if (!(catalog_service_id == rhs.catalog_service_id))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(status == rhs.status))
      return false;
    if (__isset.updated_catalog_object != rhs.__isset.updated_catalog_object)
      return false;
    else if (__isset.updated_catalog_object && !(updated_catalog_object == rhs.updated_catalog_object))
      return false;
    if (__isset.removed_catalog_object != rhs.__isset.removed_catalog_object)
      return false;
    else if (__isset.removed_catalog_object && !(removed_catalog_object == rhs.removed_catalog_object))
      return false;
    return true;
  }
  bool operator != (const TCatalogUpdateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCatalogUpdateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCatalogUpdateResult &a, TCatalogUpdateResult &b);

typedef struct _TDdlExecRequest__isset {
  _TDdlExecRequest__isset() : alter_table_params(false), alter_view_params(false), create_db_params(false), create_table_params(false), create_table_like_params(false), create_view_params(false), create_fn_params(false), drop_db_params(false), drop_table_or_view_params(false), drop_fn_params(false), compute_stats_params(false), create_data_source_params(false), drop_data_source_params(false) {}
  bool alter_table_params;
  bool alter_view_params;
  bool create_db_params;
  bool create_table_params;
  bool create_table_like_params;
  bool create_view_params;
  bool create_fn_params;
  bool drop_db_params;
  bool drop_table_or_view_params;
  bool drop_fn_params;
  bool compute_stats_params;
  bool create_data_source_params;
  bool drop_data_source_params;
} _TDdlExecRequest__isset;

class TDdlExecRequest {
 public:

  static const char* ascii_fingerprint; // = "2D2DAF95C3183131CF0745CAF6C4B537";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0x2D,0xAF,0x95,0xC3,0x18,0x31,0x31,0xCF,0x07,0x45,0xCA,0xF6,0xC4,0xB5,0x37};

  TDdlExecRequest() : protocol_version((CatalogServiceVersion::type)0), ddl_type(( ::impala::TDdlType::type)0) {
    protocol_version = (CatalogServiceVersion::type)0;

  }

  virtual ~TDdlExecRequest() throw() {}

  CatalogServiceVersion::type protocol_version;
   ::impala::TDdlType::type ddl_type;
   ::impala::TAlterTableParams alter_table_params;
   ::impala::TCreateOrAlterViewParams alter_view_params;
   ::impala::TCreateDbParams create_db_params;
   ::impala::TCreateTableParams create_table_params;
   ::impala::TCreateTableLikeParams create_table_like_params;
   ::impala::TCreateOrAlterViewParams create_view_params;
   ::impala::TCreateFunctionParams create_fn_params;
   ::impala::TDropDbParams drop_db_params;
   ::impala::TDropTableOrViewParams drop_table_or_view_params;
   ::impala::TDropFunctionParams drop_fn_params;
   ::impala::TComputeStatsParams compute_stats_params;
   ::impala::TCreateDataSourceParams create_data_source_params;
   ::impala::TDropDataSourceParams drop_data_source_params;

  _TDdlExecRequest__isset __isset;

  void __set_protocol_version(const CatalogServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_ddl_type(const  ::impala::TDdlType::type val) {
    ddl_type = val;
  }

  void __set_alter_table_params(const  ::impala::TAlterTableParams& val) {
    alter_table_params = val;
    __isset.alter_table_params = true;
  }

  void __set_alter_view_params(const  ::impala::TCreateOrAlterViewParams& val) {
    alter_view_params = val;
    __isset.alter_view_params = true;
  }

  void __set_create_db_params(const  ::impala::TCreateDbParams& val) {
    create_db_params = val;
    __isset.create_db_params = true;
  }

  void __set_create_table_params(const  ::impala::TCreateTableParams& val) {
    create_table_params = val;
    __isset.create_table_params = true;
  }

  void __set_create_table_like_params(const  ::impala::TCreateTableLikeParams& val) {
    create_table_like_params = val;
    __isset.create_table_like_params = true;
  }

  void __set_create_view_params(const  ::impala::TCreateOrAlterViewParams& val) {
    create_view_params = val;
    __isset.create_view_params = true;
  }

  void __set_create_fn_params(const  ::impala::TCreateFunctionParams& val) {
    create_fn_params = val;
    __isset.create_fn_params = true;
  }

  void __set_drop_db_params(const  ::impala::TDropDbParams& val) {
    drop_db_params = val;
    __isset.drop_db_params = true;
  }

  void __set_drop_table_or_view_params(const  ::impala::TDropTableOrViewParams& val) {
    drop_table_or_view_params = val;
    __isset.drop_table_or_view_params = true;
  }

  void __set_drop_fn_params(const  ::impala::TDropFunctionParams& val) {
    drop_fn_params = val;
    __isset.drop_fn_params = true;
  }

  void __set_compute_stats_params(const  ::impala::TComputeStatsParams& val) {
    compute_stats_params = val;
    __isset.compute_stats_params = true;
  }

  void __set_create_data_source_params(const  ::impala::TCreateDataSourceParams& val) {
    create_data_source_params = val;
    __isset.create_data_source_params = true;
  }

  void __set_drop_data_source_params(const  ::impala::TDropDataSourceParams& val) {
    drop_data_source_params = val;
    __isset.drop_data_source_params = true;
  }

  bool operator == (const TDdlExecRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(ddl_type == rhs.ddl_type))
      return false;
    if (__isset.alter_table_params != rhs.__isset.alter_table_params)
      return false;
    else if (__isset.alter_table_params && !(alter_table_params == rhs.alter_table_params))
      return false;
    if (__isset.alter_view_params != rhs.__isset.alter_view_params)
      return false;
    else if (__isset.alter_view_params && !(alter_view_params == rhs.alter_view_params))
      return false;
    if (__isset.create_db_params != rhs.__isset.create_db_params)
      return false;
    else if (__isset.create_db_params && !(create_db_params == rhs.create_db_params))
      return false;
    if (__isset.create_table_params != rhs.__isset.create_table_params)
      return false;
    else if (__isset.create_table_params && !(create_table_params == rhs.create_table_params))
      return false;
    if (__isset.create_table_like_params != rhs.__isset.create_table_like_params)
      return false;
    else if (__isset.create_table_like_params && !(create_table_like_params == rhs.create_table_like_params))
      return false;
    if (__isset.create_view_params != rhs.__isset.create_view_params)
      return false;
    else if (__isset.create_view_params && !(create_view_params == rhs.create_view_params))
      return false;
    if (__isset.create_fn_params != rhs.__isset.create_fn_params)
      return false;
    else if (__isset.create_fn_params && !(create_fn_params == rhs.create_fn_params))
      return false;
    if (__isset.drop_db_params != rhs.__isset.drop_db_params)
      return false;
    else if (__isset.drop_db_params && !(drop_db_params == rhs.drop_db_params))
      return false;
    if (__isset.drop_table_or_view_params != rhs.__isset.drop_table_or_view_params)
      return false;
    else if (__isset.drop_table_or_view_params && !(drop_table_or_view_params == rhs.drop_table_or_view_params))
      return false;
    if (__isset.drop_fn_params != rhs.__isset.drop_fn_params)
      return false;
    else if (__isset.drop_fn_params && !(drop_fn_params == rhs.drop_fn_params))
      return false;
    if (__isset.compute_stats_params != rhs.__isset.compute_stats_params)
      return false;
    else if (__isset.compute_stats_params && !(compute_stats_params == rhs.compute_stats_params))
      return false;
    if (__isset.create_data_source_params != rhs.__isset.create_data_source_params)
      return false;
    else if (__isset.create_data_source_params && !(create_data_source_params == rhs.create_data_source_params))
      return false;
    if (__isset.drop_data_source_params != rhs.__isset.drop_data_source_params)
      return false;
    else if (__isset.drop_data_source_params && !(drop_data_source_params == rhs.drop_data_source_params))
      return false;
    return true;
  }
  bool operator != (const TDdlExecRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDdlExecRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDdlExecRequest &a, TDdlExecRequest &b);

typedef struct _TDdlExecResponse__isset {
  _TDdlExecResponse__isset() : new_table_created(false), result_set(false) {}
  bool new_table_created;
  bool result_set;
} _TDdlExecResponse__isset;

class TDdlExecResponse {
 public:

  static const char* ascii_fingerprint; // = "AD901E48A38DC51D70949C3FC9726C8F";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0x90,0x1E,0x48,0xA3,0x8D,0xC5,0x1D,0x70,0x94,0x9C,0x3F,0xC9,0x72,0x6C,0x8F};

  TDdlExecResponse() : new_table_created(0) {
  }

  virtual ~TDdlExecResponse() throw() {}

  TCatalogUpdateResult result;
  bool new_table_created;
   ::impala::TResultSet result_set;

  _TDdlExecResponse__isset __isset;

  void __set_result(const TCatalogUpdateResult& val) {
    result = val;
  }

  void __set_new_table_created(const bool val) {
    new_table_created = val;
    __isset.new_table_created = true;
  }

  void __set_result_set(const  ::impala::TResultSet& val) {
    result_set = val;
    __isset.result_set = true;
  }

  bool operator == (const TDdlExecResponse & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (__isset.new_table_created != rhs.__isset.new_table_created)
      return false;
    else if (__isset.new_table_created && !(new_table_created == rhs.new_table_created))
      return false;
    if (__isset.result_set != rhs.__isset.result_set)
      return false;
    else if (__isset.result_set && !(result_set == rhs.result_set))
      return false;
    return true;
  }
  bool operator != (const TDdlExecResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDdlExecResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDdlExecResponse &a, TDdlExecResponse &b);


class TUpdateCatalogRequest {
 public:

  static const char* ascii_fingerprint; // = "FA770FB3B4307BBFEBE7BE033777F3EC";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x77,0x0F,0xB3,0xB4,0x30,0x7B,0xBF,0xEB,0xE7,0xBE,0x03,0x37,0x77,0xF3,0xEC};

  TUpdateCatalogRequest() : protocol_version((CatalogServiceVersion::type)0), target_table(), db_name() {
    protocol_version = (CatalogServiceVersion::type)0;

  }

  virtual ~TUpdateCatalogRequest() throw() {}

  CatalogServiceVersion::type protocol_version;
  std::string target_table;
  std::string db_name;
  std::set<std::string>  created_partitions;

  void __set_protocol_version(const CatalogServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_target_table(const std::string& val) {
    target_table = val;
  }

  void __set_db_name(const std::string& val) {
    db_name = val;
  }

  void __set_created_partitions(const std::set<std::string> & val) {
    created_partitions = val;
  }

  bool operator == (const TUpdateCatalogRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(target_table == rhs.target_table))
      return false;
    if (!(db_name == rhs.db_name))
      return false;
    if (!(created_partitions == rhs.created_partitions))
      return false;
    return true;
  }
  bool operator != (const TUpdateCatalogRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUpdateCatalogRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUpdateCatalogRequest &a, TUpdateCatalogRequest &b);


class TUpdateCatalogResponse {
 public:

  static const char* ascii_fingerprint; // = "CE691F9F8D9AD6F09C50197342EF00B8";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x69,0x1F,0x9F,0x8D,0x9A,0xD6,0xF0,0x9C,0x50,0x19,0x73,0x42,0xEF,0x00,0xB8};

  TUpdateCatalogResponse() {
  }

  virtual ~TUpdateCatalogResponse() throw() {}

  TCatalogUpdateResult result;

  void __set_result(const TCatalogUpdateResult& val) {
    result = val;
  }

  bool operator == (const TUpdateCatalogResponse & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const TUpdateCatalogResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUpdateCatalogResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUpdateCatalogResponse &a, TUpdateCatalogResponse &b);

typedef struct _TResetMetadataRequest__isset {
  _TResetMetadataRequest__isset() : table_name(false) {}
  bool table_name;
} _TResetMetadataRequest__isset;

class TResetMetadataRequest {
 public:

  static const char* ascii_fingerprint; // = "F3E9E4385990C0F2F6E01C70360C721E";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0xE9,0xE4,0x38,0x59,0x90,0xC0,0xF2,0xF6,0xE0,0x1C,0x70,0x36,0x0C,0x72,0x1E};

  TResetMetadataRequest() : protocol_version((CatalogServiceVersion::type)0), is_refresh(0) {
    protocol_version = (CatalogServiceVersion::type)0;

  }

  virtual ~TResetMetadataRequest() throw() {}

  CatalogServiceVersion::type protocol_version;
  bool is_refresh;
   ::impala::TTableName table_name;

  _TResetMetadataRequest__isset __isset;

  void __set_protocol_version(const CatalogServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_is_refresh(const bool val) {
    is_refresh = val;
  }

  void __set_table_name(const  ::impala::TTableName& val) {
    table_name = val;
    __isset.table_name = true;
  }

  bool operator == (const TResetMetadataRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(is_refresh == rhs.is_refresh))
      return false;
    if (__isset.table_name != rhs.__isset.table_name)
      return false;
    else if (__isset.table_name && !(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const TResetMetadataRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResetMetadataRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResetMetadataRequest &a, TResetMetadataRequest &b);


class TResetMetadataResponse {
 public:

  static const char* ascii_fingerprint; // = "CE691F9F8D9AD6F09C50197342EF00B8";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x69,0x1F,0x9F,0x8D,0x9A,0xD6,0xF0,0x9C,0x50,0x19,0x73,0x42,0xEF,0x00,0xB8};

  TResetMetadataResponse() {
  }

  virtual ~TResetMetadataResponse() throw() {}

  TCatalogUpdateResult result;

  void __set_result(const TCatalogUpdateResult& val) {
    result = val;
  }

  bool operator == (const TResetMetadataResponse & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const TResetMetadataResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResetMetadataResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResetMetadataResponse &a, TResetMetadataResponse &b);

typedef struct _TGetFunctionsRequest__isset {
  _TGetFunctionsRequest__isset() : db_name(false) {}
  bool db_name;
} _TGetFunctionsRequest__isset;

class TGetFunctionsRequest {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  TGetFunctionsRequest() : protocol_version((CatalogServiceVersion::type)0), db_name() {
    protocol_version = (CatalogServiceVersion::type)0;

  }

  virtual ~TGetFunctionsRequest() throw() {}

  CatalogServiceVersion::type protocol_version;
  std::string db_name;

  _TGetFunctionsRequest__isset __isset;

  void __set_protocol_version(const CatalogServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_db_name(const std::string& val) {
    db_name = val;
    __isset.db_name = true;
  }

  bool operator == (const TGetFunctionsRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (__isset.db_name != rhs.__isset.db_name)
      return false;
    else if (__isset.db_name && !(db_name == rhs.db_name))
      return false;
    return true;
  }
  bool operator != (const TGetFunctionsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetFunctionsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TGetFunctionsRequest &a, TGetFunctionsRequest &b);

typedef struct _TGetFunctionsResponse__isset {
  _TGetFunctionsResponse__isset() : status(false), functions(false) {}
  bool status;
  bool functions;
} _TGetFunctionsResponse__isset;

class TGetFunctionsResponse {
 public:

  static const char* ascii_fingerprint; // = "1B1804A5EE7C90A5EAF4E5FD1B4D8D27";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x18,0x04,0xA5,0xEE,0x7C,0x90,0xA5,0xEA,0xF4,0xE5,0xFD,0x1B,0x4D,0x8D,0x27};

  TGetFunctionsResponse() {
  }

  virtual ~TGetFunctionsResponse() throw() {}

   ::impala::TStatus status;
  std::vector< ::impala::TFunction>  functions;

  _TGetFunctionsResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
    __isset.status = true;
  }

  void __set_functions(const std::vector< ::impala::TFunction> & val) {
    functions = val;
    __isset.functions = true;
  }

  bool operator == (const TGetFunctionsResponse & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.functions != rhs.__isset.functions)
      return false;
    else if (__isset.functions && !(functions == rhs.functions))
      return false;
    return true;
  }
  bool operator != (const TGetFunctionsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetFunctionsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TGetFunctionsResponse &a, TGetFunctionsResponse &b);


class TGetCatalogObjectRequest {
 public:

  static const char* ascii_fingerprint; // = "85561DABB062D2D52A1B30050BC1C797";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x56,0x1D,0xAB,0xB0,0x62,0xD2,0xD5,0x2A,0x1B,0x30,0x05,0x0B,0xC1,0xC7,0x97};

  TGetCatalogObjectRequest() : protocol_version((CatalogServiceVersion::type)0) {
    protocol_version = (CatalogServiceVersion::type)0;

  }

  virtual ~TGetCatalogObjectRequest() throw() {}

  CatalogServiceVersion::type protocol_version;
   ::impala::TCatalogObject object_desc;

  void __set_protocol_version(const CatalogServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_object_desc(const  ::impala::TCatalogObject& val) {
    object_desc = val;
  }

  bool operator == (const TGetCatalogObjectRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(object_desc == rhs.object_desc))
      return false;
    return true;
  }
  bool operator != (const TGetCatalogObjectRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetCatalogObjectRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TGetCatalogObjectRequest &a, TGetCatalogObjectRequest &b);


class TGetCatalogObjectResponse {
 public:

  static const char* ascii_fingerprint; // = "7C9987A5181D6EC6EFCDF83660FDC460";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x99,0x87,0xA5,0x18,0x1D,0x6E,0xC6,0xEF,0xCD,0xF8,0x36,0x60,0xFD,0xC4,0x60};

  TGetCatalogObjectResponse() {
  }

  virtual ~TGetCatalogObjectResponse() throw() {}

   ::impala::TCatalogObject catalog_object;

  void __set_catalog_object(const  ::impala::TCatalogObject& val) {
    catalog_object = val;
  }

  bool operator == (const TGetCatalogObjectResponse & rhs) const
  {
    if (!(catalog_object == rhs.catalog_object))
      return false;
    return true;
  }
  bool operator != (const TGetCatalogObjectResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetCatalogObjectResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TGetCatalogObjectResponse &a, TGetCatalogObjectResponse &b);


class TPrioritizeLoadRequest {
 public:

  static const char* ascii_fingerprint; // = "4F51AD70F956833CDE268A569BCFB38B";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x51,0xAD,0x70,0xF9,0x56,0x83,0x3C,0xDE,0x26,0x8A,0x56,0x9B,0xCF,0xB3,0x8B};

  TPrioritizeLoadRequest() : protocol_version((CatalogServiceVersion::type)0) {
    protocol_version = (CatalogServiceVersion::type)0;

  }

  virtual ~TPrioritizeLoadRequest() throw() {}

  CatalogServiceVersion::type protocol_version;
  std::vector< ::impala::TCatalogObject>  object_descs;

  void __set_protocol_version(const CatalogServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_object_descs(const std::vector< ::impala::TCatalogObject> & val) {
    object_descs = val;
  }

  bool operator == (const TPrioritizeLoadRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(object_descs == rhs.object_descs))
      return false;
    return true;
  }
  bool operator != (const TPrioritizeLoadRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPrioritizeLoadRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPrioritizeLoadRequest &a, TPrioritizeLoadRequest &b);

typedef struct _TPrioritizeLoadResponse__isset {
  _TPrioritizeLoadResponse__isset() : status(false) {}
  bool status;
} _TPrioritizeLoadResponse__isset;

class TPrioritizeLoadResponse {
 public:

  static const char* ascii_fingerprint; // = "BA609E39B08A478BB74F0F877E3C5C4A";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x60,0x9E,0x39,0xB0,0x8A,0x47,0x8B,0xB7,0x4F,0x0F,0x87,0x7E,0x3C,0x5C,0x4A};

  TPrioritizeLoadResponse() {
  }

  virtual ~TPrioritizeLoadResponse() throw() {}

   ::impala::TStatus status;

  _TPrioritizeLoadResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
    __isset.status = true;
  }

  bool operator == (const TPrioritizeLoadResponse & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TPrioritizeLoadResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPrioritizeLoadResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPrioritizeLoadResponse &a, TPrioritizeLoadResponse &b);

} // namespace

#endif
